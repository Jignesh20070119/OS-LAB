#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>      // open, fcntl
#include <sys/stat.h>   // stat
#include <dirent.h>     // opendir, readdir
#include <string.h>

int main() {
    int fd;
    struct stat fileStat;
    char buffer[100];

    // 1. Open file
    fd = open("sample.txt", O_CREAT | O_RDWR, 0644);
    if (fd < 0) {
        perror("open");
        exit(1);
    }
    printf("File opened successfully (fd = %d)\n", fd);

    // 2. Use fcntl to duplicate the file descriptor
    int newfd = fcntl(fd, F_DUPFD, 0);
    if (newfd < 0) {
        perror("fcntl");
        close(fd);
        exit(1);
    }
    printf("File descriptor duplicated using fcntl (newfd = %d)\n", newfd);

    // Write data to file
    char *text = "Hello, demonstrating UNIX I/O system calls.\n";
    write(fd, text, strlen(text));

    // 3. Seek back to beginning of file
    lseek(fd, 0, SEEK_SET);
    int n = read(fd, buffer, sizeof(buffer) - 1);
    buffer[n] = '\0';
    printf("Data read after seek:\n%s\n", buffer);

    // 4. Get file information using stat
    if (stat("sample.txt", &fileStat) < 0) {
        perror("stat");
        exit(1);
    }
    printf("File information for sample.txt:\n");
    printf("  Size: %ld bytes\n", fileStat.st_size);
    printf("  Permissions: %o\n", fileStat.st_mode & 0777);
    printf("  Links: %ld\n", fileStat.st_nlink);

    // 5. List directory contents using opendir() and readdir()
    DIR *dir;
    struct dirent *entry;
    dir = opendir(".");
    if (dir == NULL) {
        perror("opendir");
        exit(1);
    }
    printf("\nDirectory listing of current folder:\n");
    while ((entry = readdir(dir)) != NULL) {
        printf("  %s\n", entry->d_name);
    }
    closedir(dir);

    // Close file descriptors
    close(fd);
    close(newfd);

    return 0;
}
